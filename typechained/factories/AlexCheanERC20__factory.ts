/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AlexCheanERC20,
  AlexCheanERC20Interface,
} from "../AlexCheanERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amountToMint",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "setBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620012ca380380620012ca83398101604081905262000034916200040c565b8251839083906200004d906003906020850190620002bb565b50805162000063906004906020840190620002bb565b5050506200007833826200008160201b60201c565b505050620005dd565b60006200008e83620000db565b905081811015620000b657620000b083620000aa83856200055a565b620000f6565b620000d6565b81811115620000d657620000d683620000d084846200055a565b620001c7565b505050565b6001600160a01b031660009081526020819052604090205490565b6001600160a01b038216620001285760405162461bcd60e51b81526004016200011f90620004ff565b60405180910390fd5b6200013660008383620000d6565b80600260008282546200014a91906200053f565b90915550506001600160a01b03821660009081526020819052604081208054839290620001799084906200053f565b90915550506040516001600160a01b03831690600090600080516020620012aa83398151915290620001ad90859062000536565b60405180910390a3620001c360008383620000d6565b5050565b6001600160a01b038216620001f05760405162461bcd60e51b81526004016200011f90620004be565b620001fe82600083620000d6565b6001600160a01b038216600090815260208190526040902054818110156200023a5760405162461bcd60e51b81526004016200011f906200047c565b6001600160a01b03831660009081526020819052604081208383039055600280548492906200026b9084906200055a565b90915550506040516000906001600160a01b03851690600080516020620012aa833981519152906200029f90869062000536565b60405180910390a3620000d6836000846001600160e01b038416565b828054620002c99062000574565b90600052602060002090601f016020900481019282620002ed576000855562000338565b82601f106200030857805160ff191683800117855562000338565b8280016001018555821562000338579182015b82811115620003385782518255916020019190600101906200031b565b50620003469291506200034a565b5090565b5b808211156200034657600081556001016200034b565b600082601f83011262000372578081fd5b81516001600160401b03808211156200038f576200038f620005c7565b6040516020601f8401601f1916820181018381118382101715620003b757620003b7620005c7565b6040528382528584018101871015620003ce578485fd5b8492505b83831015620003f15785830181015182840182015291820191620003d2565b838311156200040257848185840101525b5095945050505050565b60008060006060848603121562000421578283fd5b83516001600160401b038082111562000438578485fd5b620004468783880162000361565b945060208601519150808211156200045c578384fd5b506200046b8682870162000361565b925050604084015190509250925092565b60208082526022908201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604082015261636560f01b606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b60008219821115620005555762000555620005b1565b500190565b6000828210156200056f576200056f620005b1565b500390565b6002810460018216806200058957607f821691505b60208210811415620005ab57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b610cbd80620005ed6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a082311461014757806395d89b411461015a578063a457c2d714610162578063a9059cbb14610175578063dd62ed3e14610188578063e30443bc1461019b576100b4565b806306fdde03146100b9578063095ea7b3146100d757806318160ddd146100f757806323b872dd1461010c578063313ce5671461011f5780633950935114610134575b600080fd5b6100c16101b0565b6040516100ce9190610902565b60405180910390f35b6100ea6100e53660046108ce565b610242565b6040516100ce91906108f7565b6100ff61025f565b6040516100ce9190610bf0565b6100ea61011a366004610893565b610265565b6101276102fe565b6040516100ce9190610bf9565b6100ea6101423660046108ce565b610303565b6100ff610155366004610840565b610357565b6100c1610376565b6100ea6101703660046108ce565b610385565b6100ea6101833660046108ce565b6103fe565b6100ff610196366004610861565b610412565b6101ae6101a93660046108ce565b61043d565b005b6060600380546101bf90610c36565b80601f01602080910402602001604051908101604052809291908181526020018280546101eb90610c36565b80156102385780601f1061020d57610100808354040283529160200191610238565b820191906000526020600020905b81548152906001019060200180831161021b57829003601f168201915b5050505050905090565b600061025661024f61048a565b848461048e565b50600192915050565b60025490565b6000610272848484610542565b6001600160a01b03841660009081526001602052604081208161029361048a565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828110156102df5760405162461bcd60e51b81526004016102d690610a62565b60405180910390fd5b6102f3856102eb61048a565b85840361048e565b506001949350505050565b601290565b600061025661031061048a565b84846001600061031e61048a565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546103529190610c07565b61048e565b6001600160a01b0381166000908152602081905260409020545b919050565b6060600480546101bf90610c36565b6000806001600061039461048a565b6001600160a01b03908116825260208083019390935260409182016000908120918816815292529020549050828110156103e05760405162461bcd60e51b81526004016102d690610b74565b6103f46103eb61048a565b8585840361048e565b5060019392505050565b600061025661040b61048a565b8484610542565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600061044883610357565b90508181101561046a57610465836104608385610c1f565b61066c565b610485565b8181111561048557610485836104808484610c1f565b610738565b505050565b3390565b6001600160a01b0383166104b45760405162461bcd60e51b81526004016102d690610b30565b6001600160a01b0382166104da5760405162461bcd60e51b81526004016102d6906109da565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610535908590610bf0565b60405180910390a3505050565b6001600160a01b0383166105685760405162461bcd60e51b81526004016102d690610aeb565b6001600160a01b03821661058e5760405162461bcd60e51b81526004016102d690610955565b610599838383610485565b6001600160a01b038316600090815260208190526040902054818110156105d25760405162461bcd60e51b81526004016102d690610a1c565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610609908490610c07565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106539190610bf0565b60405180910390a3610666848484610485565b50505050565b6001600160a01b0382166106925760405162461bcd60e51b81526004016102d690610bb9565b61069e60008383610485565b80600260008282546106b09190610c07565b90915550506001600160a01b038216600090815260208190526040812080548392906106dd908490610c07565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610720908590610bf0565b60405180910390a361073460008383610485565b5050565b6001600160a01b03821661075e5760405162461bcd60e51b81526004016102d690610aaa565b61076a82600083610485565b6001600160a01b038216600090815260208190526040902054818110156107a35760405162461bcd60e51b81526004016102d690610998565b6001600160a01b03831660009081526020819052604081208383039055600280548492906107d2908490610c1f565b90915550506040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610815908690610bf0565b60405180910390a361048583600084610485565b80356001600160a01b038116811461037157600080fd5b600060208284031215610851578081fd5b61085a82610829565b9392505050565b60008060408385031215610873578081fd5b61087c83610829565b915061088a60208401610829565b90509250929050565b6000806000606084860312156108a7578081fd5b6108b084610829565b92506108be60208501610829565b9150604084013590509250925092565b600080604083850312156108e0578182fd5b6108e983610829565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b8181101561092e57858101830151858201604001528201610912565b8181111561093f5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604082015261636560f01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b60208082526021908201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b6020808252601f908201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604082015260600190565b90815260200190565b60ff91909116815260200190565b60008219821115610c1a57610c1a610c71565b500190565b600082821015610c3157610c31610c71565b500390565b600281046001821680610c4a57607f821691505b60208210811415610c6b57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212205e89a01c7800881afaeb49de8391f9f8be7f534f674f145adb262c614af9fbec64736f6c63430008000033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";

type AlexCheanERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AlexCheanERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AlexCheanERC20__factory extends ContractFactory {
  constructor(...args: AlexCheanERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    name_: string,
    symbol_: string,
    amountToMint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AlexCheanERC20> {
    return super.deploy(
      name_,
      symbol_,
      amountToMint,
      overrides || {}
    ) as Promise<AlexCheanERC20>;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    amountToMint: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      amountToMint,
      overrides || {}
    );
  }
  attach(address: string): AlexCheanERC20 {
    return super.attach(address) as AlexCheanERC20;
  }
  connect(signer: Signer): AlexCheanERC20__factory {
    return super.connect(signer) as AlexCheanERC20__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AlexCheanERC20Interface {
    return new utils.Interface(_abi) as AlexCheanERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AlexCheanERC20 {
    return new Contract(address, _abi, signerOrProvider) as AlexCheanERC20;
  }
}
